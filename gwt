# this file is intended to be sourced from your login shell

function gwt_create_worktree {
    if [[ ! -d ${repodir}/${1} ]]; then
        echo -e "${color}gwt: Unable to find repo: ${nocolor}${1}"
        echo
        tree -d -L 1 --noreport ${repodir}
    else
        if [[ ! -d ${repodir}/${1}/.trees ]]; then
            echo -e "${color}gwt: Ensuring worktree parent dir exists in repo: ${nocolor}${1}"
            mkdir -p ${repodir}/${1}/.trees
        else
            cd ${repodir}/${1}/.trees
        fi

        if [[ -d ${repodir}/${1}/.trees/${2} ]]; then
            echo -e "${color}gwt: Found existing worktree ${nocolor}${2}${color} in ${nocolor}${1}"
            echo
            tree -d -L 1 --noreport ${repodir}/${1}/.trees
        else
            local fetch_remote
            fetch_remote="${3%\/*}"
            echo -e "${color}gwt: Checking if ${nocolor}${fetch_remote}${color} is a fetchable remote${nocolor}"
            local fetch_branch
            fetch_branch="${3#*\/}"
            local fetchable_remote
            fetchable_remote=$(git remotes | grep -E "^${fetch_remote}.*\(fetch\)$")

            if [[ -z "${fetchable_remote}" ]]; then
                echo -e "${color}gwt: Remote ${nocolor}${fetch_remote}${color} is not fetchable${nocolor}"
                echo -e "${color}gwt: Please re-run: ${nocolor}gwt create <repo> <worktree> <remote>"
            else
                echo -e "${color}gwt: Fetching remote: ${nocolor}${fetch_remote}"
                git fetch --prune --tags ${fetch_remote}

                echo -e "${color}gwt: Checking if ${nocolor}${fetch_branch}${color} is a valid head on ${nocolor}${fetch_remote}${color} remote${nocolor}"
                local remote_head
                remote_head=$(git ls-remote --heads ${fetch_remote} | grep "${fetch_branch}$")

                if [[ -z "${remote_head}" ]]; then
                    echo -e "${color}gwt: Head ${nocolor}${fetch_branch}${color} was not found on ${nocolor}${fetch_remote}${color} remote${nocolor}"
                    echo -e "${color}gwt: Please re-run: ${nocolor}gwt create <repo> <worktree> <remote>/<head>"
                else
                    echo -e "${color}gwt: Creating worktree${nocolor}"
                    local add_ret
                    git worktree add -b ${2} ${repodir}/${1}/.trees/${2} ${3}
                    add_ret=$?

                    if [[ ${add_ret} -ne 0 ]]; then
                        echo
                        echo -e "${color}gwt: Creating the worktree FAILED !!${nocolor}"
                    else
                        cd ${repodir}/${1}/.trees/${2}
                        gwt_init_submodules
                        echo -e "${color}gwt: Creating an empty commit${nocolor}"
                        git commit -m 'chore: empty commit to allow push'
                        echo -e "${color}gwt: Pushing the worktree${nocolor}"
                        git push origin
                    fi
                fi
            fi
        fi
    fi
}

function gwt_get_upstream_development_revision {
    echo -e "${color}gwt: Determining the upstream remote for this branch${nocolor}"
    local _upstream_remote; _upstream_remote=$(git rev-parse --abbrev-ref $(git branch --show-current)@{upstream} | cut -d\/ -f1)
    echo -e "${color}gwt: Determined the upstream remote for this branch: ${nocolor}${_upstream_remote}"
    echo -e "${color}gwt: Determining the upstream branch for this branch${nocolor}"
    local _upstream_branch; _upstream_branch=$(git rev-parse --abbrev-ref $(git branch --show-current)@{upstream} | cut -d\/ -f2)
    echo -e "${color}gwt: Determined the upstream branch for this branch: ${nocolor}${_upstream_branch}"

    echo -e "${color}gwt: Fetching info from remote: ${nocolor}${_upstream_remote}"
    git fetch --prune --force --quiet upstream

    echo -e "${color}gwt: Checking if ${nocolor}${_upstream_remote}/${_upstream_branch}${color} has advanocolored sinocolore last pull${nocolor}"
    git merge-base --is-anocolorestor $(git branch --show-current) ${_upstream_remote}/${_upstream_branch}
    anocolorestor_ret=$?

    if [[ ${anocolorestor_ret} -eq 0 ]]; then
        echo -e "${color}gwt: Remote head has not advanocolored${nocolor}"
    else
        echo -e "${color}gwt: Merging from remote head: ${nocolor}${_upstream_remote}/${_upstream_branch}"
        git merge ${_upstream_remote}/${_upstream_branch}
    fi
}

function gwt_check_for_merge {
    echo -e "${color}gwt: Checking if a merge is in progress${nocolor}"
    git rev-list -1 MERGE_HEAD &>/dev/null
    if [[ $? -eq 128 ]]; then
        echo -e "${color}gwt: A merge IS NOT in progress${nocolor}"
        gwt_get_origin_revision
        gwt_get_upstream_development_revision
    else
        echo -e "${color}gwt: A MERGE IS IN PROGRESS. Please finish the merge!${nocolor}"
    fi
    }
function gwt_enter_worktree {
    cd ${1}
    gwt_check_for_merge
    _todo=$(whenocolore todo)
    if [[ -n ${_todo} ]] ; then
        echo
        todo pop
    fi
}

function prune_cache_worktrees {
    git worktree list | grep -E '\.cache.*old-rev' | awk '{print $1}' | while read line2; do
        git worktree remove -f "${line2}"
    done
}

function gwt_find_trees {
    if [[ -d ${repodir} ]]; then
        if [[ -z ${1} ]]; then
            find ${repodir} -type d -wholename '*/.trees' -print | while read line; do
                (cd ${line} && prune_cache_worktrees && dirname ${line} && git worktree list | tail -n +2 | sed -e "s#${repodir}/.*\.trees/##g" -e 's/^/↳\ /')
                echo
            done
        else
            basename ${repodir}/${1}
            (cd ${repodir}/${1} && prune_cache_worktrees && git worktree list | tail -n +2 | sed -e "s#${repodir}/${1}/.trees/##g" -e 's/^/↳\ /')
        fi
    else
        echo -e "${color}gwt: Cannot find the path specified by GWT_REPO_HOME{$nocolor}"
        echo -e "${color}gwt: Please set/update GWT_REPO_HOME and try again${nocolor}"
    fi
}

function gwt_find_specified_worktree {
    local reponame
    if [[ $# -gt 1 ]]; then
        reponame=${1}
        shift
    else
        reponame=''
    fi

    if [[ -d ${repodir}/${reponame} ]]; then
        local worktrees
        worktrees=$(find ${repodir}/${reponame} -type d -wholename "*/.trees/${1}" -print)
        local worktree_count
        if [[ -z "${worktrees}" ]]; then
            worktree_count=0
        else
            worktree_count=$(echo ${worktrees} | wc -l)
        fi

        case ${worktree_count} in
            0)
                if [[ -z "${reponame}" ]]; then
                    echo -e "${color}gwt: Unable to find a worktree named ${nocolor}${1}${color} in ${nocolor}${repodir}"
                    echo
                    gwt_find_trees
                else
                    echo -e "${color}gwt: Unable to find a worktree named ${nocolor}${1}${color} in ${nocolor}${reponame}"
                    echo -e "${color}gwt: If you wish to create this worktree, pls re-run as: ${nocolor}gwt create <repo> <worktree>"
                fi
                ;;
            1)
                echo -e "${color}gwt: Found the ${nocolor}${1}${color} worktree${nocolor}"
                gwt_enter_worktree ${worktrees}
                ;;
            *)
                echo -e "${color}gwt: Found multiple worktrees named ${nocolor}${1}${color} in ${nocolor}${repodir}"
                echo -e "${color}gwt: Please re-run as: ${nocolor}gwt <repo> <worktree>"
                echo
                gwt_find_trees
                ;;
        esac
    else
        echo -e "${color}gwt: Unable to find ${nocolor}${reponame} ${color}repo${nocolor}"
        echo -e "${color}gwt: Double-check GWT_REPO_HOME${nocolor}"
    fi
}

function gwt_get_origin_revision {
    echo -e "${color}gwt: Determining the worktree's branch revision${nocolor}"
    local local_revision
    local_revision=$(git rev-parse $(git branch --show-current))
    echo -e "${color}gwt: Local worktree's branch revision: ${nocolor}${local_revision}"

    echo -e "${color}gwt: Fetching info from remote: ${nocolor}origin"
    git fetch --prune --force --quiet origin

    echo -e "${color}gwt: Checking if this branch exists on remote: ${nocolor}origin"
    local remote_head
    remote_head=$(git ls-remote --heads origin | grep "refs/heads/$(git branch --show-current)$")

    if [[ -z "${remote_head}" ]]; then
        echo -e "${color}gwt: This worktree's branch not found on remote: ${nocolor}origin"
    else
        echo -e "${color}gwt: Checking the revision of this branch on: ${nocolor}origin"
        local remote_revision
        remote_revision=$(git rev-parse origin/$(git branch --show-current))
        echo -e "${color}gwt: Remote ${nocolor}origin${color} has this branch on revision: ${nocolor}${remote_revision}"

        echo -e "${color}gwt: Checking the base revision of this branch on: ${nocolor}origin"
        local base_revision
        base_revision=$(git merge-base $(git branch --show-current) origin/$(git branch --show-current))

        if [[ "${local_revision}" == "${remote_revision}" ]]; then
            echo -e "${color}gwt: Revisions match; continuing${nocolor}"
        elif [[ "${local_revision}" == "${base_revision}" ]]; then
            echo -e "${color}gwt: Pulling from remote: ${nocolor}origin"
            git pull origin $(git branch --show-current)
        elif [[ "${remote_revision}" == "${base_revision}" ]]; then
            echo -e "${color}gwt: Pushing to remote: ${nocolor}origin"
            git push --prune origin $(git branch --show-current)
        fi
    fi
}

function gwt_init_submodules {
        echo -e "${color}gwt: Initializing submodules${nocolor}"
        git submodule update --remote --recursive --init
}

function gwt_prune_worktree {
    local reponame
    if [[ $# -gt 1 ]]; then
        reponame=${1}
        shift
    else
        reponame=''
    fi

    if [[ -d ${repodir}/${reponame} ]]; then
        local worktrees
        worktrees=$(find ${repodir}/${reponame} -type d -wholename "*/.trees/${1}" -print)
        local worktree_count
        if [[ -z "${worktrees}" ]]; then
            worktree_count=0
        else
            worktree_count=$(echo ${worktrees} | wc -l)
        fi

        case ${worktree_count} in
            1)
                cd $(dirname ${worktrees})
                echo -e "${color}gwt: Removing the worktree from disk: ${nocolor}${worktrees}"
                git worktree remove --force ${worktrees}
                echo -e "${color}gwt: Deleting the branch: ${nocolor}${1}"
                git branch -D ${1} 2>/dev/null
                cd ~
                ;;
            *)
                echo -e "${color}gwt: Could not find the worktree ${nocolor}${1}${color} in repository ${nocolor}${reponame}"
                echo -e "${color}gwt: Unable to prune the worktree: ${nocolor}${1}"
                ;;
        esac
    fi
}

function gwt {
    # where all your repos live
    local repodir; repodir="${GWT_REPO_HOME:=/srv/repos}" ; repodir="${repodir%/}"
    # colors
    color='\033[0;32m'
    nocolor='\033[0m'

    case $# in
        0)
            # no args, give them a listing
            gwt_find_trees
            ;;
        1|2)
            case "${1}" in
                create|prune)
                    echo -e "${color}gwt: Invalid options${nocolor}"
                    echo -e "${color}gwt: Please re-run as: ${nocolor}gwt ${1} <repo> <worktree>"
                    ;;
                ls)
                    gwt_find_trees ${2}
                    ;;
                *)
                    gwt_find_specified_worktree "$@"
                    ;;
            esac
            ;;
        3|4)
            if [[ "${1}" == "create" ]]; then
                shift
                case $# in
                    2)
                        gwt_create_worktree ${1} ${2} upstream/development
                        ;;
                    3)
                        local remote ; remote=${3%\/*}
                        local head; head=${3#*\/}
                        gwt_create_worktree ${1} ${2} ${remote}/${head:=development}
                        ;;
                    4)
                        local remote ; remote=${3}
                        local head; head=${4}
                        gwt_create_worktree ${1} ${2} ${remote}/${head}
                        ;;
                esac
            elif [[ "${1}" == "prune" ]]; then
                shift
                gwt_prune_worktree "$@"
            else
                echo -e "${color}gwt: Invalid options${nocolor}"
                echo -e "${color}gwt: Please re-run as: ${nocolor}gwt create <repo> <worktree>"
            fi
            ;;
    esac
}
